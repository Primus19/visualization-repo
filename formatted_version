import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import table
from matplotlib.dates import DateFormatter

# Read CSV file into DataFrame
csv_file = 'your_file.csv'  # Replace with your actual file path
df = pd.read_csv(csv_file)

# Convert 'instance_create_time' to datetime
df['instance_create_time'] = pd.to_datetime(df['instance_create_time'], errors='coerce')

# Replace NaN with "empty"
df.fillna("empty", inplace=True)

# Format the 'instance_create_time' to 'YYYY-MM-DD HH:MM:SS'
df['instance_create_time'] = df['instance_create_time'].dt.strftime('%Y-%m-%d %H:%M:%S')

# Display basic information about the DataFrame
print(df.info())

# Match each db_instance_identifier to its respective columns
df_summary = df[['db_instance_identifier', 'db_name', 'db_instance_class', 'engine', 'engine_version', 'instance_create_time']]

# Display the DataFrame in a nicely formatted table
print("\nSummary DataFrame:")
print(df_summary)

# Plot 1: Count of instances by db_instance_class
plt.figure(figsize=(10, 6))
df['db_instance_class'].value_counts().plot(kind='bar', color='skyblue')
plt.title('Count of Instances by DB Instance Class')
plt.xlabel('DB Instance Class')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot 2: Count of instances by engine
plt.figure(figsize=(10, 6))
df['engine'].value_counts().plot(kind='bar', color='lightgreen')
plt.title('Count of Instances by Engine')
plt.xlabel('Engine')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot 3: Instances creation over time
plt.figure(figsize=(10, 6))
df.set_index('instance_create_time').resample('M').size().plot(color='coral')
plt.title('Instances Creation Over Time')
plt.xlabel('Time')
plt.ylabel('Number of Instances Created')
plt.gca().xaxis.set_major_formatter(DateFormatter("%Y-%m"))
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

# Plot 4: Distribution of engine versions
plt.figure(figsize=(10, 6))
df['engine_version'].value_counts().plot(kind='bar', color='orange')
plt.title('Distribution of Engine Versions')
plt.xlabel('Engine Version')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Save plots to files
df['db_instance_class'].value_counts().plot(kind='bar', color='skyblue').figure.savefig('instances_by_class.png')
df['engine'].value_counts().plot(kind='bar', color='lightgreen').figure.savefig('instances_by_engine.png')
df.set_index('instance_create_time').resample('M').size().plot(color='coral').figure.savefig('instances_over_time.png')
df['engine_version'].value_counts().plot(kind='bar', color='orange').figure.savefig('engine_versions.png')

# Save the DataFrame as a PNG file
def save_dataframe_as_image(df, path):
    fig, ax = plt.subplots(figsize=(12, 6))  # Set the size frame
    ax.axis('tight')
    ax.axis('off')
    the_table = table(ax, df, loc='center', cellLoc='center', colColours=["lightgray"] * len(df.columns))
    the_table.auto_set_font_size(False)
    the_table.set_fontsize(10)
    the_table.scale(1.2, 1.2)  # Adjust scaling as needed
    plt.savefig(path, bbox_inches='tight', dpi=300)
    plt.close(fig)

# Save the summary DataFrame as an image
save_dataframe_as_image(df_summary, 'summary_dataframe.png')

# Display DataFrame in a nice table format using pandas options
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)
pd.set_option('display.colheader_justify', 'center')
pd.set_option('display.precision', 3)

# Print the nicely formatted DataFrame
print(df_summary.to_string(index=False))
